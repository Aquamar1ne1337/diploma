//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Diploma
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DiplomadbEntities : DbContext
    {
        public DiplomadbEntities()
            : base("name=DiplomadbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Задание> Задание { get; set; }
        public virtual DbSet<Заметка> Заметка { get; set; }
        public virtual DbSet<Клиент> Клиент { get; set; }
        public virtual DbSet<Подзадача> Подзадача { get; set; }
        public virtual DbSet<Пользователь> Пользователь { get; set; }
        public virtual DbSet<Распределение> Распределение { get; set; }
        public virtual DbSet<Статус> Статус { get; set; }
        public virtual DbSet<Тип> Тип { get; set; }
        public virtual DbSet<Уведомление> Уведомление { get; set; }
        public virtual DbSet<AdminNoteList> AdminNoteLists { get; set; }
        public virtual DbSet<GanttView> GanttViews { get; set; }
        public virtual DbSet<SubtaskGanttChart> SubtaskGanttCharts { get; set; }
    
        public virtual int ClientAdd(string name, string email, Nullable<System.DateTime> date, string phone, string town)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var townParameter = town != null ?
                new ObjectParameter("town", town) :
                new ObjectParameter("town", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClientAdd", nameParameter, emailParameter, dateParameter, phoneParameter, townParameter);
        }
    
        public virtual int ClientUpdate(string name, string email, Nullable<System.DateTime> date, string phone, string town, Nullable<int> id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var townParameter = town != null ?
                new ObjectParameter("town", town) :
                new ObjectParameter("town", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClientUpdate", nameParameter, emailParameter, dateParameter, phoneParameter, townParameter, idParameter);
        }
    
        public virtual int DroppedNotificationAdd(string name, Nullable<int> taskid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var taskidParameter = taskid.HasValue ?
                new ObjectParameter("taskid", taskid) :
                new ObjectParameter("taskid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DroppedNotificationAdd", nameParameter, taskidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DroppedTaskCount(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DroppedTaskCount", useridParameter);
        }
    
        public virtual ObjectResult<EmployeeView_Result> EmployeeView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeView_Result>("EmployeeView");
        }
    
        public virtual ObjectResult<EndedTasks_Result> EndedTasks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EndedTasks_Result>("EndedTasks");
        }
    
        public virtual int ExpiredNotificationAdd(string name, Nullable<int> taskid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var taskidParameter = taskid.HasValue ?
                new ObjectParameter("taskid", taskid) :
                new ObjectParameter("taskid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExpiredNotificationAdd", nameParameter, taskidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InProcessTaskCount(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InProcessTaskCount", useridParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> lateReadyTaskCount(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("lateReadyTaskCount", useridParameter);
        }
    
        public virtual int NoteAdd(Nullable<int> destributionid, string description)
        {
            var destributionidParameter = destributionid.HasValue ?
                new ObjectParameter("destributionid", destributionid) :
                new ObjectParameter("destributionid", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NoteAdd", destributionidParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<NoteList_Result> NoteList(Nullable<int> destribution)
        {
            var destributionParameter = destribution.HasValue ?
                new ObjectParameter("destribution", destribution) :
                new ObjectParameter("destribution", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NoteList_Result>("NoteList", destributionParameter);
        }
    
        public virtual int OnTaskRemoveDistribution(Nullable<int> userid, Nullable<int> taskid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var taskidParameter = taskid.HasValue ?
                new ObjectParameter("taskid", taskid) :
                new ObjectParameter("taskid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OnTaskRemoveDistribution", useridParameter, taskidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ReadyTaskCount(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ReadyTaskCount", useridParameter);
        }
    
        public virtual int SignUp(string login, string password)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SignUp", loginParameter, passwordParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SubtaskAdd(Nullable<int> taskid, string description)
        {
            var taskidParameter = taskid.HasValue ?
                new ObjectParameter("taskid", taskid) :
                new ObjectParameter("taskid", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubtaskAdd", taskidParameter, descriptionParameter);
        }
    
        public virtual int SubtaskComplete(Nullable<int> subtaskid)
        {
            var subtaskidParameter = subtaskid.HasValue ?
                new ObjectParameter("subtaskid", subtaskid) :
                new ObjectParameter("subtaskid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubtaskComplete", subtaskidParameter);
        }
    
        public virtual int SubtaskRollback(Nullable<int> subtaskid)
        {
            var subtaskidParameter = subtaskid.HasValue ?
                new ObjectParameter("subtaskid", subtaskid) :
                new ObjectParameter("subtaskid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubtaskRollback", subtaskidParameter);
        }
    
        public virtual ObjectResult<SubtaskView_Result> SubtaskView(Nullable<int> taskid)
        {
            var taskidParameter = taskid.HasValue ?
                new ObjectParameter("taskid", taskid) :
                new ObjectParameter("taskid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubtaskView_Result>("SubtaskView", taskidParameter);
        }
    
        public virtual int TakDistributionReaded(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TakDistributionReaded", useridParameter);
        }
    
        public virtual int TaskAdd(Nullable<int> client, string name, string description, Nullable<System.DateTime> deadline)
        {
            var clientParameter = client.HasValue ?
                new ObjectParameter("client", client) :
                new ObjectParameter("client", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var deadlineParameter = deadline.HasValue ?
                new ObjectParameter("deadline", deadline) :
                new ObjectParameter("deadline", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TaskAdd", clientParameter, nameParameter, descriptionParameter, deadlineParameter);
        }
    
        public virtual int TaskCompleted(Nullable<int> taskid)
        {
            var taskidParameter = taskid.HasValue ?
                new ObjectParameter("taskid", taskid) :
                new ObjectParameter("taskid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TaskCompleted", taskidParameter);
        }
    
        public virtual int TaskDistribution(Nullable<int> taskid, Nullable<int> userid)
        {
            var taskidParameter = taskid.HasValue ?
                new ObjectParameter("taskid", taskid) :
                new ObjectParameter("taskid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TaskDistribution", taskidParameter, useridParameter);
        }
    
        public virtual int TaskRemoveDistribution(Nullable<int> taskid, Nullable<int> userid)
        {
            var taskidParameter = taskid.HasValue ?
                new ObjectParameter("taskid", taskid) :
                new ObjectParameter("taskid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TaskRemoveDistribution", taskidParameter, useridParameter);
        }
    
        public virtual ObjectResult<TasksPerformed_Result> TasksPerformed()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TasksPerformed_Result>("TasksPerformed");
        }
    
        public virtual ObjectResult<UsersInTask_Result> UsersInTask(Nullable<int> taskid)
        {
            var taskidParameter = taskid.HasValue ?
                new ObjectParameter("taskid", taskid) :
                new ObjectParameter("taskid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UsersInTask_Result>("UsersInTask", taskidParameter);
        }
    
        public virtual ObjectResult<UserTaskList_Result> UserTaskList(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserTaskList_Result>("UserTaskList", useridParameter);
        }
    
        public virtual ObjectResult<UserTaskUpdater_Result> UserTaskUpdater(Nullable<int> usertask)
        {
            var usertaskParameter = usertask.HasValue ?
                new ObjectParameter("usertask", usertask) :
                new ObjectParameter("usertask", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserTaskUpdater_Result>("UserTaskUpdater", usertaskParameter);
        }
    }
}
